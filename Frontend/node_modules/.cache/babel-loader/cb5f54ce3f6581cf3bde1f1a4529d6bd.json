{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from \"axios\";\nimport { BEFORE_STATE_QUESTION, FETCH_QUESTIONS, FETCH_QUESTIONS_ERROR, GET_QUESTION_ERROR, CREATE_QUESTION_ERROR, DELETE_QUESTION_SUCCESS, GET_QUESTION_SUCCESS, DELETE_QUESTION_ERROR, FETCH_AUTH_QUESTIONS, FETCH_AUTH_QUESTIONS_ERROR, CREATE_QUESTION_SUCCESS } from \"../questionsTypes\";\nimport { history } from \"../../../../history\";\nexport const fetchQuestions = () => {\n  return dispatch => {\n    axios.get(`${API_ROUTE}/questions`).then(res => {\n      dispatch({\n        type: FETCH_QUESTIONS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: FETCH_QUESTIONS_ERROR,\n        payload: err.response ? err.respons.data.error : \"\"\n      });\n    });\n  };\n};\nexport const fetchQuestion = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      const res = await axios.get(`${API_ROUTE}/questions/${id}`);\n      dispatch({\n        type: GET_QUESTION_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_QUESTION_ERROR,\n        payload: err.response.data.error\n      });\n      history.push(\"/\"); //incase the user manually enter the param that dont exist\n    }\n  };\n};\nexport const fetchAuthQuestions = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      const res = await axios.get(`${API_ROUTE}/questions_user/${id}`);\n      dispatch({\n        type: FETCH_AUTH_QUESTIONS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: FETCH_AUTH_QUESTIONS_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const createQuestion = createQuestion => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      axios.post(`${API_ROUTE}/questions`, createQuestion);\n      history.replace(\"/\");\n    } catch (err) {\n      dispatch({\n        type: CREATE_QUESTION_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const deleteQuestion = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      const res = await axios.delete(`${API_ROUTE}/posts/${id}`);\n      dispatch({\n        type: DELETE_QUESTION_SUCCESS,\n        payload: {\n          deletedID: id,\n          message: res.data.response\n        }\n      });\n      history.push(\"/\");\n    } catch (err) {\n      dispatch({\n        type: DELETE_QUESTION_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/questions/actions/questionsAction.js"],"names":["API_ROUTE","axios","BEFORE_STATE_QUESTION","FETCH_QUESTIONS","FETCH_QUESTIONS_ERROR","GET_QUESTION_ERROR","CREATE_QUESTION_ERROR","DELETE_QUESTION_SUCCESS","GET_QUESTION_SUCCESS","DELETE_QUESTION_ERROR","FETCH_AUTH_QUESTIONS","FETCH_AUTH_QUESTIONS_ERROR","CREATE_QUESTION_SUCCESS","history","fetchQuestions","dispatch","get","then","res","type","payload","data","catch","err","response","respons","error","fetchQuestion","id","push","fetchAuthQuestions","createQuestion","post","replace","deleteQuestion","delete","deletedID","message"],"mappings":"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","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from \"axios\";\r\nimport {\r\n  BEFORE_STATE_QUESTION,\r\n  FETCH_QUESTIONS,\r\n  FETCH_QUESTIONS_ERROR,\r\n  GET_QUESTION_ERROR,\r\n  CREATE_QUESTION_ERROR,\r\n  DELETE_QUESTION_SUCCESS,\r\n  GET_QUESTION_SUCCESS,\r\n  DELETE_QUESTION_ERROR,\r\n  FETCH_AUTH_QUESTIONS,\r\n  FETCH_AUTH_QUESTIONS_ERROR,\r\n  CREATE_QUESTION_SUCCESS,\r\n} from \"../questionsTypes\";\r\nimport { history } from \"../../../../history\";\r\n\r\nexport const fetchQuestions = () => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(`${API_ROUTE}/questions`)\r\n      .then((res) => {\r\n        dispatch({ type: FETCH_QUESTIONS, payload: res.data });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: FETCH_QUESTIONS_ERROR,\r\n          payload: err.response ? err.respons.data.error : \"\",\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchQuestion = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: BEFORE_STATE_QUESTION });\r\n\r\n    try {\r\n      const res = await axios.get(`${API_ROUTE}/questions/${id}`);\r\n      dispatch({ type: GET_QUESTION_SUCCESS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: GET_QUESTION_ERROR, payload: err.response.data.error });\r\n      history.push(\"/\"); //incase the user manually enter the param that dont exist\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchAuthQuestions = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: BEFORE_STATE_QUESTION });\r\n    try {\r\n      const res = await axios.get(`${API_ROUTE}/questions_user/${id}`);\r\n      dispatch({ type: FETCH_AUTH_QUESTIONS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: FETCH_AUTH_QUESTIONS_ERROR,\r\n        payload: err.response.data.error,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const createQuestion = (createQuestion) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: BEFORE_STATE_QUESTION });\r\n    try {\r\n      axios.post(`${API_ROUTE}/questions`, createQuestion);\r\n      history.replace(\"/\");\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_QUESTION_ERROR,\r\n        payload: err.response.data.error,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteQuestion = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: BEFORE_STATE_QUESTION });\r\n\r\n    try {\r\n      const res = await axios.delete(`${API_ROUTE}/posts/${id}`);\r\n      dispatch({\r\n        type: DELETE_QUESTION_SUCCESS,\r\n        payload: {\r\n          deletedID: id,\r\n          message: res.data.response,\r\n        },\r\n      });\r\n      history.push(\"/\");\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_QUESTION_ERROR,\r\n        payload: err.response.data.error,\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}