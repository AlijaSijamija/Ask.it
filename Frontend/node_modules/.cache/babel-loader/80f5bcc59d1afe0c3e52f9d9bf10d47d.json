{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from 'axios';\nimport { ANSWER_CREATE_SUCCESS, ANSWER_CREATE_ERROR, GET_ANSWERS_SUCCESS, GET_ANSWERS_ERROR, ANSWER_DELETE_SUCCESS, ANSWER_DELETE_ERROR, ANSWER_UPDATE_SUCCESS, ANSWER_UPDATE_ERROR, BEFORE_STATE_ANSWER } from '../answerTypes';\nimport { history } from '../../../../history';\nexport const fetchanswer = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_ANSWER\n    });\n\n    try {\n      const res = await axios.get(`${API_ROUTE}/answers/${id}`);\n      dispatch({\n        type: GET_ANSWERS_SUCCESS,\n        payload: {\n          questionID: id,\n          ANSWERs: res.data.response\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_ANSWERS_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const createAnswer = (details, answerSuccess) => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_ANSWER\n    });\n\n    try {\n      const res = await axios.post(`${API_ROUTE}/answers/${details.question_id}`, details);\n      console.log(details);\n      dispatch({\n        type: ANSWER_CREATE_SUCCESS,\n        payload: {\n          questionID: details.question_id,\n          answer: res.data\n        }\n      });\n      answerSuccess();\n      history.push(`/questions/${details.question_id}`);\n    } catch (err) {\n      dispatch({\n        type: ANSWER_CREATE_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const updateanswer = (updateDetails, updateSuccess) => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_ANSWER\n    });\n\n    try {\n      const res = await axios.put(`${API_ROUTE}/answers/${updateDetails.id}`, updateDetails);\n      dispatch({\n        type: ANSWER_UPDATE_SUCCESS,\n        payload: {\n          answer: res.data.response\n        }\n      });\n      updateSuccess();\n    } catch (err) {\n      dispatch({\n        type: ANSWER_UPDATE_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const deleteAnswer = (details, deleteSuccess) => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_ANSWER\n    });\n\n    try {\n      await axios.delete(`${API_ROUTE}/answers/${details.id}`);\n      dispatch({\n        type: ANSWER_DELETE_SUCCESS,\n        payload: {\n          id: details.id,\n          questionID: details.questionID\n        }\n      });\n      deleteSuccess();\n    } catch (err) {\n      dispatch({\n        type: ANSWER_DELETE_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/answers/actions/answerAction.js"],"names":["API_ROUTE","axios","ANSWER_CREATE_SUCCESS","ANSWER_CREATE_ERROR","GET_ANSWERS_SUCCESS","GET_ANSWERS_ERROR","ANSWER_DELETE_SUCCESS","ANSWER_DELETE_ERROR","ANSWER_UPDATE_SUCCESS","ANSWER_UPDATE_ERROR","BEFORE_STATE_ANSWER","history","fetchanswer","id","dispatch","type","res","get","payload","questionID","ANSWERs","data","response","err","error","createAnswer","details","answerSuccess","post","question_id","console","log","answer","push","updateanswer","updateDetails","updateSuccess","put","deleteAnswer","deleteSuccess","delete"],"mappings":"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","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from 'axios'\r\nimport {  ANSWER_CREATE_SUCCESS, ANSWER_CREATE_ERROR, GET_ANSWERS_SUCCESS, GET_ANSWERS_ERROR,\r\n    ANSWER_DELETE_SUCCESS, ANSWER_DELETE_ERROR, ANSWER_UPDATE_SUCCESS, ANSWER_UPDATE_ERROR, \r\n    BEFORE_STATE_ANSWER } from '../answerTypes'\r\nimport  {history} from '../../../../history'\r\n\r\n\r\nexport const fetchanswer = id => {\r\n\r\n  return async dispatch => {\r\n\r\n    dispatch({ type: BEFORE_STATE_ANSWER }) \r\n\r\n    try {\r\n      const res = await axios.get(`${API_ROUTE}/answers/${id}`)\r\n      dispatch({ \r\n        type: GET_ANSWERS_SUCCESS, \r\n        payload: {\r\n          questionID: id,\r\n          ANSWERs: res.data.response,\r\n        }\r\n      })\r\n    } catch(err) {\r\n      dispatch({ type: GET_ANSWERS_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const createAnswer = (details, answerSuccess) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: BEFORE_STATE_ANSWER }) \r\n    \r\n    try {\r\n      const res  = await axios.post(`${API_ROUTE}/answers/${details.question_id}`, details)\r\n      console.log(details)\r\n      dispatch({ \r\n        type: ANSWER_CREATE_SUCCESS, \r\n        payload: {\r\n          questionID: details.question_id,\r\n          answer: res.data,\r\n        }\r\n      })\r\n      answerSuccess()\r\n      history.push(`/questions/${details.question_id}`);\r\n    } catch(err){\r\n      dispatch({ type: ANSWER_CREATE_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateanswer = (updateDetails, updateSuccess) => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch({ type: BEFORE_STATE_ANSWER }) \r\n\r\n    try {\r\n      const res = await axios.put(`${API_ROUTE}/answers/${updateDetails.id}`, updateDetails)\r\n      dispatch({ \r\n        type: ANSWER_UPDATE_SUCCESS,\r\n        payload: {\r\n            answer: res.data.response\r\n        } \r\n      })\r\n      updateSuccess()\r\n    } catch(err) {\r\n      dispatch({ type: ANSWER_UPDATE_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteAnswer = (details, deleteSuccess) => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch({ type: BEFORE_STATE_ANSWER }) \r\n\r\n    try {\r\n      await axios.delete(`${API_ROUTE}/answers/${details.id}`)\r\n      dispatch({ \r\n        type: ANSWER_DELETE_SUCCESS,\r\n        payload: {\r\n          id: details.id,\r\n          questionID: details.questionID,\r\n        } \r\n      })\r\n      deleteSuccess()\r\n    } catch(err) {\r\n      dispatch({ type: ANSWER_DELETE_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}