{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from 'axios';\nimport { BEFORE_STATE_QUESTION, FETCH_QUESTIONS, FETCH_QUESTIONS_ERROR, GET_QUESTION_ERROR, CREATE_QUESTION_SUCCESS, CREATE_QUESTION_ERROR, DELETE_QUESTION_SUCCESS, GET_QUESTION_SUCCESS, DELETE_QUESTION_ERROR, FETCH_AUTH_QUESTIONS, FETCH_AUTH_QUESTIONS_ERROR } from '../questionsTypes';\nimport { history } from '../../../../history';\nexport const fetchQuestions = () => {\n  return dispatch => {\n    axios.get(`${API_ROUTE}/questions`).then(res => {\n      dispatch({\n        type: FETCH_QUESTIONS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: FETCH_QUESTIONS_ERROR,\n        payload: err.response ? err.respons.data.error : \"\"\n      });\n    });\n  };\n};\nexport const fetchQuestion = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      const res = await axios.get(`${API_ROUTE}/questions/${id}`);\n      dispatch({\n        type: GET_QUESTION_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_QUESTION_ERROR,\n        payload: err.response.data.error\n      });\n      history.push('/'); //incase the user manually enter the param that dont exist\n    }\n  };\n};\nexport const fetchAuthQuestions = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      const res = await axios.get(`${API_ROUTE}/questions_user/${id}`);\n      dispatch({\n        type: FETCH_AUTH_QUESTIONS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: FETCH_AUTH_QUESTIONS_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const createQuestion = createQuestion => {\n  return async dispatch => {\n    /*dispatch({ type: BEFORE_STATE_QUESTION })\r\n    try {\r\n      const res = await axios.post(`${API_ROUTE}/questions`, createQuestion)\r\n      dispatch({ \r\n        type: CREATE_QUESTION_SUCCESS,  \r\n        payload: res.data\r\n      })\r\n      history.push('/');\r\n    } catch(err) {\r\n      dispatch({ type: CREATE_QUESTION_ERROR, payload: err.response.data.error })\r\n    }*/\n    axios.post(`${API_ROUTE}/questions`, createQuestion).then(res => {\n      dispatch({\n        type: CREATE_QUESTION_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: CREATE_QUESTION_ERROR,\n        payload: err.response.data.error\n      });\n    });\n  };\n};\nexport const deleteQuestion = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE_QUESTION\n    });\n\n    try {\n      const res = await axios.delete(`${API_ROUTE}/posts/${id}`);\n      dispatch({\n        type: DELETE_QUESTION_SUCCESS,\n        payload: {\n          deletedID: id,\n          message: res.data.response\n        }\n      });\n      history.push('/');\n    } catch (err) {\n      dispatch({\n        type: DELETE_QUESTION_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/questions/actions/questionsAction.js"],"names":["API_ROUTE","axios","BEFORE_STATE_QUESTION","FETCH_QUESTIONS","FETCH_QUESTIONS_ERROR","GET_QUESTION_ERROR","CREATE_QUESTION_SUCCESS","CREATE_QUESTION_ERROR","DELETE_QUESTION_SUCCESS","GET_QUESTION_SUCCESS","DELETE_QUESTION_ERROR","FETCH_AUTH_QUESTIONS","FETCH_AUTH_QUESTIONS_ERROR","history","fetchQuestions","dispatch","get","then","res","type","payload","data","catch","err","response","respons","error","fetchQuestion","id","push","fetchAuthQuestions","createQuestion","post","deleteQuestion","delete","deletedID","message"],"mappings":"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","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from 'axios'\r\nimport { BEFORE_STATE_QUESTION, FETCH_QUESTIONS, FETCH_QUESTIONS_ERROR, GET_QUESTION_ERROR, \r\n  CREATE_QUESTION_SUCCESS, CREATE_QUESTION_ERROR, DELETE_QUESTION_SUCCESS, GET_QUESTION_SUCCESS,\r\n  DELETE_QUESTION_ERROR, FETCH_AUTH_QUESTIONS, FETCH_AUTH_QUESTIONS_ERROR  } from '../questionsTypes'\r\nimport  {history} from '../../../../history'\r\n\r\n \r\nexport const fetchQuestions = () => {\r\n\r\n  return (dispatch) => {\r\n\r\n    axios.get(`${API_ROUTE}/questions`).then(res => {\r\n      dispatch({ type: FETCH_QUESTIONS, payload: res.data })\r\n    }).catch(err => {\r\n      dispatch({ type: FETCH_QUESTIONS_ERROR, payload: err.response ? err.respons.data.error : \"\" })\r\n    })\r\n  }\r\n}\r\n\r\nexport const fetchQuestion = id => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch({ type: BEFORE_STATE_QUESTION })\r\n\r\n    try {\r\n      const res  = await axios.get(`${API_ROUTE}/questions/${id}`)\r\n      dispatch({ type: GET_QUESTION_SUCCESS, payload: res.data })\r\n    } catch(err){\r\n      dispatch({ type: GET_QUESTION_ERROR, payload: err.response.data.error })\r\n      history.push('/'); //incase the user manually enter the param that dont exist\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchAuthQuestions = (id) => {\r\n  return async (dispatch) => {\r\n\r\n    dispatch({ type: BEFORE_STATE_QUESTION })\r\n    try {\r\n      const res  = await axios.get(`${API_ROUTE}/questions_user/${id}`)\r\n      dispatch({ type: FETCH_AUTH_QUESTIONS, payload: res.data })\r\n    } catch(err){\r\n      dispatch({ type: FETCH_AUTH_QUESTIONS_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const createQuestion = (createQuestion) => {\r\n  return async (dispatch) => {\r\n    /*dispatch({ type: BEFORE_STATE_QUESTION })\r\n    try {\r\n      const res = await axios.post(`${API_ROUTE}/questions`, createQuestion)\r\n      dispatch({ \r\n        type: CREATE_QUESTION_SUCCESS,  \r\n        payload: res.data\r\n      })\r\n      history.push('/');\r\n    } catch(err) {\r\n      dispatch({ type: CREATE_QUESTION_ERROR, payload: err.response.data.error })\r\n    }*/\r\n    axios.post(`${API_ROUTE}/questions`, createQuestion).then(res => {\r\n      dispatch({ type: CREATE_QUESTION_SUCCESS,  \r\n        payload: res.data })\r\n    }).catch(err => {\r\n      dispatch({ type: CREATE_QUESTION_ERROR, payload: err.response.data.error })\r\n    })\r\n  }\r\n}\r\n\r\nexport const deleteQuestion = (id) => {\r\n\r\n  return async (dispatch) => {\r\n\r\n    dispatch({ type: BEFORE_STATE_QUESTION })\r\n\r\n    try {\r\n      const res = await axios.delete(`${API_ROUTE}/posts/${id}`)\r\n      dispatch({ \r\n        type: DELETE_QUESTION_SUCCESS,\r\n        payload: {\r\n          deletedID: id,\r\n          message: res.data.response\r\n        } \r\n      })\r\n      history.push('/');\r\n    } catch(err) {\r\n      dispatch({ type: DELETE_QUESTION_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}