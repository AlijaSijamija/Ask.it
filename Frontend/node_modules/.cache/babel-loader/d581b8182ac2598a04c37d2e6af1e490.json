{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from 'axios';\nimport setAuthorizationToken from \"../../../../authorization/authorization\";\nimport { BEFORE_STATE, SIGNUP_SUCCESS, SIGNUP_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, LOGOUT_SUCCESS, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, BEFORE_USER_STATE, DELETE_USER_SUCCESS, DELETE_USER_ERROR } from '../authTypes';\nimport { history } from '../../../../history';\nexport const SignIn = credentials => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      //const res = await axios.post(`${API_ROUTE}/login`, credentials)\n      axios.post(`${API_ROUTE}/login`, data).then(r => {\n        console.log(r); //dispatch(saveData(r.data, loginType));\n      }).catch(error => {//dispatch(errorData(\"Wrong username or password. Please try again.\"));\n      });\n      /*\r\n      console.log(res)\r\n      let userData = res.data.response\r\n      localStorage.setItem(\"token\", userData.token)\r\n      localStorage.setItem('user_data', JSON.stringify(userData));\r\n      setAuthorizationToken(userData.token)\r\n      dispatch({ type: LOGIN_SUCCESS, payload: userData })\r\n      */\n    } catch (err) {\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n_c = SignIn;\nexport const SignOut = () => {\n  return dispatch => {\n    localStorage.removeItem(\"token\");\n    setAuthorizationToken(false);\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n    window.localStorage.clear(); //update the localstorage\n\n    history.push('/login');\n  };\n};\n_c2 = SignOut;\nexport const SignUp = newUser => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      await axios.post(`${API_ROUTE}/users`, newUser);\n      dispatch({\n        type: SIGNUP_SUCCESS\n      });\n      history.push('/login');\n    } catch (err) {\n      dispatch({\n        type: SIGNUP_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n_c3 = SignUp;\nexport const updateUser = (updateUser, clearInput) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: BEFORE_USER_STATE\n    });\n    const {\n      currentUser\n    } = getState().Auth;\n\n    try {\n      const res = await axios.put(`${API_ROUTE}/users/${currentUser.id}`, updateUser);\n      let updatedUser = res.data.response;\n      dispatch({\n        type: UPDATE_USER_SUCCESS,\n        payload: updatedUser\n      });\n      window.localStorage.setItem('user_data', JSON.stringify(updatedUser)); //update the localstorages\n\n      clearInput();\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const deleteUser = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      const res = await axios.delete(`${API_ROUTE}/users/${id}`);\n      let deleteMessage = res.data.response;\n      dispatch({\n        type: DELETE_USER_SUCCESS,\n        payload: deleteMessage\n      });\n      window.localStorage.clear(); //update the localstorage\n\n      window.location.href = \"/\";\n    } catch (err) {\n      dispatch({\n        type: DELETE_USER_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SignIn\");\n$RefreshReg$(_c2, \"SignOut\");\n$RefreshReg$(_c3, \"SignUp\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/auth/actions/authAction.js"],"names":["API_ROUTE","axios","setAuthorizationToken","BEFORE_STATE","SIGNUP_SUCCESS","SIGNUP_ERROR","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_SUCCESS","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","BEFORE_USER_STATE","DELETE_USER_SUCCESS","DELETE_USER_ERROR","history","SignIn","credentials","dispatch","type","post","data","then","r","console","log","catch","error","err","payload","response","SignOut","localStorage","removeItem","window","clear","push","SignUp","newUser","updateUser","clearInput","getState","currentUser","Auth","res","put","id","updatedUser","setItem","JSON","stringify","deleteUser","delete","deleteMessage","location","href"],"mappings":"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","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from 'axios'\r\nimport setAuthorizationToken  from \"../../../../authorization/authorization\";\r\nimport { BEFORE_STATE, SIGNUP_SUCCESS, SIGNUP_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, \r\n  LOGOUT_SUCCESS, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, BEFORE_USER_STATE, \r\n  DELETE_USER_SUCCESS, DELETE_USER_ERROR } from '../authTypes'\r\nimport  {history} from '../../../../history'\r\n\r\n\r\nexport const SignIn = (credentials) => {\r\n  return async (dispatch) => {\r\n      dispatch({ type: BEFORE_STATE }) \r\n    try {\r\n      //const res = await axios.post(`${API_ROUTE}/login`, credentials)\r\n      axios.post(`${API_ROUTE}/login`, data).then((r) => {\r\n        console.log(r)\r\n        //dispatch(saveData(r.data, loginType));\r\n      })\r\n      .catch((error) => {\r\n        //dispatch(errorData(\"Wrong username or password. Please try again.\"));\r\n      });\r\n      /*\r\n      console.log(res)\r\n      let userData = res.data.response\r\n      localStorage.setItem(\"token\", userData.token)\r\n      localStorage.setItem('user_data', JSON.stringify(userData));\r\n      setAuthorizationToken(userData.token)\r\n      dispatch({ type: LOGIN_SUCCESS, payload: userData })\r\n      */\r\n    } catch(err) {\r\n      dispatch({ type: LOGIN_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const SignOut = () => {\r\n  return (dispatch) => {\r\n    localStorage.removeItem(\"token\")\r\n    setAuthorizationToken(false)\r\n    dispatch({ type: LOGOUT_SUCCESS })\r\n    window.localStorage.clear(); //update the localstorage\r\n    history.push('/login');\r\n  }\r\n}\r\n\r\nexport const SignUp = (newUser) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: BEFORE_STATE }) \r\n      try {\r\n        await axios.post(`${API_ROUTE}/users`, newUser);\r\n        dispatch({ type: SIGNUP_SUCCESS })\r\n        history.push('/login');\r\n      } catch(err) {\r\n        dispatch({ type: SIGNUP_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUser = (updateUser, clearInput) => {\r\n\r\n  return async (dispatch, getState) => {\r\n    dispatch({ type: BEFORE_USER_STATE })\r\n    const { currentUser } = getState().Auth\r\n    try {\r\n      const res = await axios.put(`${API_ROUTE}/users/${currentUser.id}`, updateUser);\r\n      let updatedUser = res.data.response\r\n\r\n      dispatch({ type: UPDATE_USER_SUCCESS, payload: updatedUser })\r\n      window.localStorage.setItem('user_data', JSON.stringify(updatedUser)); //update the localstorages\r\n      clearInput()\r\n    } catch (err) {\r\n      dispatch({ type: UPDATE_USER_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteUser = (id)  => {\r\n\r\n  return async dispatch => {\r\n    dispatch({ type: BEFORE_STATE })\r\n    try {\r\n      const res = await axios.delete(`${API_ROUTE}/users/${id}`);\r\n      let deleteMessage = res.data.response\r\n      dispatch({ type: DELETE_USER_SUCCESS, payload: deleteMessage })\r\n      window.localStorage.clear(); //update the localstorage\r\n      window.location.href = \"/\"\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_USER_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}