{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from 'axios';\nimport setAuthorizationToken from \"../../../../authorization/authorization\";\nimport { BEFORE_STATE, SIGNUP_SUCCESS, SIGNUP_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, LOGOUT_SUCCESS, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, BEFORE_USER_STATE, DELETE_USER_SUCCESS, DELETE_USER_ERROR, FETCH_USERS, FETCH_USERS_ERROR } from '../authTypes';\nimport { history } from '../../../../history';\nexport const SignIn = credentials => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      const res = await axios.post(`${API_ROUTE}/login`, credentials);\n      let userData = res.data;\n      localStorage.setItem(\"token\", userData.token);\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      var falseToken = localStorage.getItem('user_data');\n      var trueToken = falseToken.replace(/\"/g, '');\n      localStorage.setItem('user_token', trueToken);\n      setAuthorizationToken(userData.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: userData\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n_c = SignIn;\nexport const SignOut = () => {\n  return dispatch => {\n    localStorage.removeItem(\"token\");\n    setAuthorizationToken(false);\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n    window.localStorage.clear(); //update the localstorage\n\n    history.push('/login');\n  };\n};\n_c2 = SignOut;\nexport const SignUp = newUser => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      await axios.post(`${API_ROUTE}/users`, newUser);\n      dispatch({\n        type: SIGNUP_SUCCESS\n      });\n      history.push('/login');\n    } catch (err) {\n      dispatch({\n        type: SIGNUP_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n_c3 = SignUp;\nexport const updateUser = (updateUser, clearInput) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: BEFORE_USER_STATE\n    });\n    const {\n      currentUser\n    } = getState().Auth;\n\n    try {\n      const res = await axios.put(`${API_ROUTE}/users/${currentUser.id}`, updateUser);\n      let updatedUser = res.data.response;\n      dispatch({\n        type: UPDATE_USER_SUCCESS,\n        payload: updatedUser\n      });\n      window.localStorage.setItem('user_data', JSON.stringify(updatedUser)); //update the localstorages\n\n      clearInput();\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const deleteUser = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      const res = await axios.delete(`${API_ROUTE}/users/${id}`);\n      let deleteMessage = res.data.response;\n      dispatch({\n        type: DELETE_USER_SUCCESS,\n        payload: deleteMessage\n      });\n      window.localStorage.clear(); //update the localstorage\n\n      window.location.href = \"/\";\n    } catch (err) {\n      dispatch({\n        type: DELETE_USER_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const getUser = id => {\n  return async dispatch => {\n    axios.get(`${API_ROUTE}/users/${id}`).then(res => {\n      dispatch({\n        type: FETCH_USERS,\n        payload: res.data\n      });\n      let podaci = res.data;\n      localStorage.setItem(\"korisnik\", podaci);\n    }).catch(err => {\n      dispatch({\n        type: FETCH_USERS_ERROR,\n        payload: err ? err.data.error : \"\"\n      });\n    });\n  };\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SignIn\");\n$RefreshReg$(_c2, \"SignOut\");\n$RefreshReg$(_c3, \"SignUp\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/auth/actions/authAction.js"],"names":["API_ROUTE","axios","setAuthorizationToken","BEFORE_STATE","SIGNUP_SUCCESS","SIGNUP_ERROR","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_SUCCESS","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","BEFORE_USER_STATE","DELETE_USER_SUCCESS","DELETE_USER_ERROR","FETCH_USERS","FETCH_USERS_ERROR","history","SignIn","credentials","dispatch","type","res","post","userData","data","localStorage","setItem","token","JSON","stringify","falseToken","getItem","trueToken","replace","payload","err","response","error","SignOut","removeItem","window","clear","push","SignUp","newUser","updateUser","clearInput","getState","currentUser","Auth","put","id","updatedUser","deleteUser","delete","deleteMessage","location","href","getUser","get","then","podaci","catch"],"mappings":"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","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from 'axios'\r\nimport setAuthorizationToken  from \"../../../../authorization/authorization\";\r\nimport { BEFORE_STATE, SIGNUP_SUCCESS, SIGNUP_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, \r\n  LOGOUT_SUCCESS, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, BEFORE_USER_STATE, \r\n  DELETE_USER_SUCCESS, DELETE_USER_ERROR, FETCH_USERS, FETCH_USERS_ERROR } from '../authTypes'\r\nimport  {history} from '../../../../history'\r\n\r\n\r\nexport const SignIn = (credentials) => {\r\n  return async (dispatch) => {\r\n      dispatch({ type: BEFORE_STATE }) \r\n    try {\r\n      const res = await axios.post(`${API_ROUTE}/login`, credentials)\r\n      let userData = res.data\r\n      localStorage.setItem(\"token\", userData.token)\r\n      localStorage.setItem('user_data', JSON.stringify(userData));\r\n      var falseToken = localStorage.getItem('user_data')\r\n      var trueToken = falseToken.replace(/\"/g,'')\r\n      localStorage.setItem('user_token',trueToken)\r\n      setAuthorizationToken(userData.token)\r\n      dispatch({ type: LOGIN_SUCCESS, payload: userData })\r\n    } catch(err) {\r\n      dispatch({ type: LOGIN_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const SignOut = () => {\r\n  return (dispatch) => {\r\n    localStorage.removeItem(\"token\")\r\n    setAuthorizationToken(false)\r\n    dispatch({ type: LOGOUT_SUCCESS })\r\n    window.localStorage.clear(); //update the localstorage\r\n    history.push('/login');\r\n  }\r\n}\r\n\r\nexport const SignUp = (newUser) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: BEFORE_STATE }) \r\n      try {\r\n        await axios.post(`${API_ROUTE}/users`, newUser);\r\n        dispatch({ type: SIGNUP_SUCCESS })\r\n        history.push('/login');\r\n      } catch(err) {\r\n        dispatch({ type: SIGNUP_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUser = (updateUser, clearInput) => {\r\n\r\n  return async (dispatch, getState) => {\r\n    dispatch({ type: BEFORE_USER_STATE })\r\n    const { currentUser } = getState().Auth\r\n    try {\r\n      const res = await axios.put(`${API_ROUTE}/users/${currentUser.id}`, updateUser);\r\n      let updatedUser = res.data.response\r\n\r\n      dispatch({ type: UPDATE_USER_SUCCESS, payload: updatedUser })\r\n      window.localStorage.setItem('user_data', JSON.stringify(updatedUser)); //update the localstorages\r\n      clearInput()\r\n    } catch (err) {\r\n      dispatch({ type: UPDATE_USER_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteUser = (id)  => {\r\n\r\n  return async dispatch => {\r\n    dispatch({ type: BEFORE_STATE })\r\n    try {\r\n      const res = await axios.delete(`${API_ROUTE}/users/${id}`);\r\n      let deleteMessage = res.data.response\r\n      dispatch({ type: DELETE_USER_SUCCESS, payload: deleteMessage })\r\n      window.localStorage.clear(); //update the localstorage\r\n      window.location.href = \"/\"\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_USER_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const getUser = (id) => {\r\n\r\n  return async (dispatch) => {\r\n    axios.get(`${API_ROUTE}/users/${id}`).then(res => {\r\n      dispatch({ type: FETCH_USERS, payload: res.data })\r\n      let podaci = res.data\r\n      localStorage.setItem(\"korisnik\", podaci)\r\n    }).catch(err => {\r\n      dispatch({ type: FETCH_USERS_ERROR, payload: err ? err.data.error : \"\" })\r\n    })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}