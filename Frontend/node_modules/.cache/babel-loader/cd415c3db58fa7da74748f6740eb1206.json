{"ast":null,"code":"import { BEFORE_STATE_ANSWER, ANSWER_CREATE_SUCCESS, ANSWER_CREATE_ERROR, GET_ANSWERS_SUCCESS, GET_ANSWERS_ERROR, ANSWER_DELETE_SUCCESS, ANSWER_DELETE_ERROR, ANSWER_UPDATE_SUCCESS, ANSWER_UPDATE_ERROR } from '../answerTypes';\nexport const initState = {\n  answerItems: [],\n  isLoading: false,\n  answerSuccess: false\n};\nexport const answersState = (state = initState, action) => {\n  const {\n    payload,\n    type\n  } = action;\n\n  switch (type) {\n    case BEFORE_STATE_ANSWER:\n      return { ...state,\n        answersError: null,\n        isLoading: true,\n        answerSuccess: false\n      };\n\n    case GET_ANSWERS_SUCCESS:\n      return { ...state,\n        answerItems: [...state.answerItems, {\n          questionID: payload.questionID,\n          answers: payload.answers\n        }],\n        isLoading: false,\n        answersError: null\n      };\n\n    case GET_ANSWERS_ERROR:\n      return { ...state,\n        answerError: payload,\n        isLoading: false\n      };\n\n    case ANSWER_CREATE_SUCCESS:\n      return { ...state,\n        answerItems: state.answerItems.map(answerItem => Number(answerItem.questionID) === payload.questionID ? { ...answerItem,\n          answers: [payload.answer, ...answerItem.answers]\n        } : answerItem),\n        message: \"The answer is added\",\n        isLoading: false,\n        answerSuccess: true\n      };\n\n    case ANSWER_CREATE_ERROR:\n      return { ...state,\n        answersError: payload,\n        isLoading: false,\n        answerSuccess: false\n      };\n\n    case ANSWER_UPDATE_SUCCESS:\n      return { ...state,\n        answerItems: state.answerItems.map(answerItem => Number(answerItem.questionID) === payload.answer.question_id ? { ...answerItem,\n          answers: answerItem.answers.map(answer => answer.id === payload.answer.id ? { ...answer,\n            body: payload.answer.body\n          } : answer)\n        } : answerItem),\n        answersError: null,\n        isLoading: false,\n        answerSuccess: true\n      };\n\n    case ANSWER_UPDATE_ERROR:\n      return { ...state,\n        answersError: payload,\n        isLoading: false,\n        answerSuccess: false\n      };\n\n    case ANSWER_DELETE_SUCCESS:\n      return { ...state,\n        answerItems: state.answerItems.map(answerItem => Number(answerItem.questionID) === payload.questionID ? { ...answerItem,\n          answers: answerItem.answers.filter(({\n            id\n          }) => id !== payload.id)\n        } : answerItem),\n        answersError: null,\n        isLoading: false,\n        answerSuccess: true\n      };\n\n    case ANSWER_DELETE_ERROR:\n      return { ...state,\n        answersError: payload,\n        isLoading: false,\n        answerSuccess: false\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/answers/reducer/answersReducer.js"],"names":["BEFORE_STATE_ANSWER","ANSWER_CREATE_SUCCESS","ANSWER_CREATE_ERROR","GET_ANSWERS_SUCCESS","GET_ANSWERS_ERROR","ANSWER_DELETE_SUCCESS","ANSWER_DELETE_ERROR","ANSWER_UPDATE_SUCCESS","ANSWER_UPDATE_ERROR","initState","answerItems","isLoading","answerSuccess","answersState","state","action","payload","type","answersError","questionID","answers","answerError","map","answerItem","Number","answer","message","question_id","id","body","filter"],"mappings":"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","sourcesContent":["import { BEFORE_STATE_ANSWER, ANSWER_CREATE_SUCCESS, ANSWER_CREATE_ERROR, GET_ANSWERS_SUCCESS, \r\n    GET_ANSWERS_ERROR, ANSWER_DELETE_SUCCESS, ANSWER_DELETE_ERROR, ANSWER_UPDATE_SUCCESS, \r\n    ANSWER_UPDATE_ERROR } from '../answerTypes'\r\n\r\nexport const initState = {\r\n  answerItems : [],\r\n  isLoading: false,\r\n  answerSuccess: false\r\n}\r\n\r\n\r\nexport const answersState = (state = initState, action) => {\r\n  \r\n  const { payload, type }  = action;\r\n  switch(type) {\r\n\r\n    case BEFORE_STATE_ANSWER:\r\n      return {\r\n        ...state,\r\n        answersError: null,\r\n        isLoading: true,\r\n        answerSuccess: false\r\n      }\r\n\r\n    case GET_ANSWERS_SUCCESS:\r\n      return { \r\n        ...state, \r\n        answerItems: [...state.answerItems, { questionID: payload.questionID, answers: payload.answers  } ],\r\n        isLoading: false,\r\n        answersError: null,\r\n      }\r\n\r\n    case GET_ANSWERS_ERROR:\r\n      return { \r\n        ...state, \r\n        answerError: payload, \r\n        isLoading: false,\r\n      }\r\n\r\n    case ANSWER_CREATE_SUCCESS:\r\n      return { \r\n        ...state, \r\n        answerItems: state.answerItems.map(answerItem => \r\n                    Number(answerItem.questionID) === payload.questionID ? \r\n                    {...answerItem, answers: [payload.answer, ...answerItem.answers]} : answerItem\r\n        ),\r\n        message: \"The answer is added\",\r\n        isLoading: false,\r\n        answerSuccess: true\r\n     }\r\n\r\n    case ANSWER_CREATE_ERROR:\r\n      return { \r\n        ...state, \r\n        answersError: payload, \r\n        isLoading: false,\r\n        answerSuccess: false\r\n      }\r\n\r\n    case ANSWER_UPDATE_SUCCESS:\r\n      return { \r\n        ...state, \r\n        answerItems: state.answerItems.map(answerItem => \r\n          Number(answerItem.questionID) === payload.answer.question_id ? \r\n          {...answerItem, answers: answerItem.answers.map(answer => answer.id === payload.answer.id  ? \r\n          {...answer, body: payload.answer.body } : answer  ) } : answerItem\r\n        ),\r\n        answersError: null, \r\n        isLoading: false,\r\n        answerSuccess: true,\r\n      }\r\n\r\n    case ANSWER_UPDATE_ERROR:\r\n      return { \r\n        ...state, \r\n        answersError: payload, \r\n        isLoading: false,\r\n        answerSuccess: false\r\n      }\r\n\r\n    case ANSWER_DELETE_SUCCESS:\r\n      return { \r\n        ...state, \r\n        answerItems: state.answerItems.map(answerItem => \r\n          Number(answerItem.questionID) === payload.questionID ? \r\n          {...answerItem, answers: answerItem.answers.filter(({id}) => id !== payload.id ) } : answerItem\r\n        ),\r\n        answersError: null, \r\n        isLoading: false,\r\n        answerSuccess: true,\r\n      }\r\n\r\n    case ANSWER_DELETE_ERROR:\r\n      return { \r\n        ...state, \r\n        answersError: payload, \r\n        isLoading: false,\r\n        answerSuccess: false\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}