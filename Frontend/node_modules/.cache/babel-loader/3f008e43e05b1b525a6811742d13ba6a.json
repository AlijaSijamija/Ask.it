{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\Ministry of Programming\\\\askit\\\\src\\\\components\\\\answers\\\\EditAnswer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup } from \"reactstrap\";\nimport { FaPencilAlt } from \"react-icons/fa\";\nimport { updateanswer } from \"../../store/modules/answers/actions/answerAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditAnswer = ({\n  answer,\n  className\n}) => {\n  _s();\n\n  const [modal, setModal] = useState(false);\n  const [answerUpdate, setAnswerUpdate] = useState(\"\");\n  const dispatch = useDispatch();\n  const currentState = useSelector(state => state);\n\n  const theUpdate = details => dispatch(updateanswer(details, updateSuccess));\n\n  const updateSuccess = () => {\n    setModal(!modal);\n  };\n\n  useEffect(() => {\n    setAnswerUpdate(answer);\n  }, [answer]);\n\n  const toggle = e => {\n    e.preventDefault();\n    setModal(!modal);\n    setAnswerUpdate(answer);\n  };\n\n  const handleChange = e => {\n    setAnswerUpdate(e.target.value); //since is just one value\n  };\n\n  console.log(answer);\n\n  const submitAnswer = e => {\n    e.preventDefault();\n    theUpdate({\n      id: answer.id,\n      content: answerUpdate\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(FaPencilAlt, {\n      className: \"style-edit \",\n      onClick: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modal,\n      toggle: toggle,\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \"Edit Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            name: \"content\",\n            style: {\n              width: \"100%\",\n              height: \"100px\"\n            },\n            defaultValue: answerUpdate.content,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), currentState.AnswersState.answersError && currentState.AnswersState.answersError.Required_body ? /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"color-red\",\n            children: currentState.AnswersState.answersError.Required_body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [currentState.AnswersState.isLoading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          disabled: true,\n          children: \"Updating...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: submitAnswer,\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          onClick: toggle,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditAnswer, \"53MA5nm+7CmxDKJKVtZMzmnX7rc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = EditAnswer;\nexport default EditAnswer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditAnswer\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/components/answers/EditAnswer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Button","Modal","ModalHeader","ModalBody","ModalFooter","FormGroup","FaPencilAlt","updateanswer","EditAnswer","answer","className","modal","setModal","answerUpdate","setAnswerUpdate","dispatch","currentState","state","theUpdate","details","updateSuccess","toggle","e","preventDefault","handleChange","target","value","console","log","submitAnswer","id","content","width","height","AnswersState","answersError","Required_body","isLoading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  FormGroup,\r\n} from \"reactstrap\";\r\nimport { FaPencilAlt } from \"react-icons/fa\";\r\n\r\nimport { updateanswer } from \"../../store/modules/answers/actions/answerAction\";\r\n\r\nconst EditAnswer = ({ answer, className }) => {\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const [answerUpdate, setAnswerUpdate] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const currentState = useSelector((state) => state);\r\n\r\n  const theUpdate = (details) => dispatch(updateanswer(details, updateSuccess));\r\n\r\n  const updateSuccess = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAnswerUpdate(answer);\r\n  }, [answer]);\r\n\r\n  const toggle = (e) => {\r\n    e.preventDefault();\r\n    setModal(!modal);\r\n    setAnswerUpdate(answer);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setAnswerUpdate(e.target.value); //since is just one value\r\n  };\r\n  console.log(answer)\r\n  const submitAnswer = (e) => {\r\n    e.preventDefault();\r\n    theUpdate({\r\n      id: answer.id,\r\n      content: answerUpdate,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <span>\r\n      <FaPencilAlt className=\"style-edit \" onClick={toggle} />\r\n\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Edit Answer</ModalHeader>\r\n        <ModalBody>\r\n          <FormGroup>\r\n            <label>Content</label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              name=\"content\"\r\n              style={{ width: \"100%\", height: \"100px\" }}\r\n              defaultValue={answerUpdate.content}\r\n              onChange={handleChange}\r\n            ></textarea>\r\n            {currentState.AnswersState.answersError &&\r\n            currentState.AnswersState.answersError.Required_body ? (\r\n              <small className=\"color-red\">\r\n                {currentState.AnswersState.answersError.Required_body}\r\n              </small>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {currentState.AnswersState.isLoading ? (\r\n            <button className=\"btn btn-primary\" disabled>\r\n              Updating...\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={submitAnswer}\r\n              type=\"submit\"\r\n            >\r\n              Update\r\n            </button>\r\n          )}\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default EditAnswer;\r\n"]},"metadata":{},"sourceType":"module"}