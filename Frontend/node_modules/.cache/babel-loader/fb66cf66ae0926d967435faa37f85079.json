{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from 'axios';\nimport setAuthorizationToken from \"../../../../authorization/authorization\";\nimport { BEFORE_STATE, SIGNUP_SUCCESS, SIGNUP_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, LOGOUT_SUCCESS, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, BEFORE_USER_STATE, DELETE_USER_SUCCESS, DELETE_USER_ERROR } from '../authTypes';\nimport { history } from '../../../../history';\nexport const SignIn = credentials => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      const res = await axios.post(`${API_ROUTE}/login`, credentials);\n      let userData = res.data;\n      localStorage.setItem(\"id\", userData.id);\n      localStorage.setItem(\"token\", userData.token);\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      var str = localStorage.getItem('user_data');\n      var new_str = str.replace(/\"/g, '');\n      localStorage.setItem('user_token', new_str);\n      setAuthorizationToken(userData.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: userData\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n_c = SignIn;\nexport const SignOut = () => {\n  return dispatch => {\n    localStorage.removeItem(\"token\");\n    setAuthorizationToken(false);\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n    window.localStorage.clear(); //update the localstorage\n\n    history.push('/login');\n  };\n};\n_c2 = SignOut;\nexport const SignUp = newUser => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      await axios.post(`${API_ROUTE}/users`, newUser);\n      dispatch({\n        type: SIGNUP_SUCCESS\n      });\n      history.push('/login');\n    } catch (err) {\n      dispatch({\n        type: SIGNUP_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n_c3 = SignUp;\nexport const updateUser = (updateUser, clearInput) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: BEFORE_USER_STATE\n    });\n    const {\n      currentUser\n    } = getState().Auth;\n\n    try {\n      const res = await axios.put(`${API_ROUTE}/users/${currentUser.id}`, updateUser);\n      let updatedUser = res.data.response;\n      dispatch({\n        type: UPDATE_USER_SUCCESS,\n        payload: updatedUser\n      });\n      window.localStorage.setItem('user_data', JSON.stringify(updatedUser)); //update the localstorages\n\n      clearInput();\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const deleteUser = id => {\n  return async dispatch => {\n    dispatch({\n      type: BEFORE_STATE\n    });\n\n    try {\n      const res = await axios.delete(`${API_ROUTE}/users/${id}`);\n      let deleteMessage = res.data.response;\n      dispatch({\n        type: DELETE_USER_SUCCESS,\n        payload: deleteMessage\n      });\n      window.localStorage.clear(); //update the localstorage\n\n      window.location.href = \"/\";\n    } catch (err) {\n      dispatch({\n        type: DELETE_USER_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SignIn\");\n$RefreshReg$(_c2, \"SignOut\");\n$RefreshReg$(_c3, \"SignUp\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/auth/actions/authAction.js"],"names":["API_ROUTE","axios","setAuthorizationToken","BEFORE_STATE","SIGNUP_SUCCESS","SIGNUP_ERROR","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_SUCCESS","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","BEFORE_USER_STATE","DELETE_USER_SUCCESS","DELETE_USER_ERROR","history","SignIn","credentials","dispatch","type","res","post","userData","data","localStorage","setItem","id","token","JSON","stringify","str","getItem","new_str","replace","payload","err","response","error","SignOut","removeItem","window","clear","push","SignUp","newUser","updateUser","clearInput","getState","currentUser","Auth","put","updatedUser","deleteUser","delete","deleteMessage","location","href"],"mappings":"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","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from 'axios'\r\nimport setAuthorizationToken  from \"../../../../authorization/authorization\";\r\nimport { BEFORE_STATE, SIGNUP_SUCCESS, SIGNUP_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, \r\n  LOGOUT_SUCCESS, UPDATE_USER_SUCCESS, UPDATE_USER_ERROR, BEFORE_USER_STATE, \r\n  DELETE_USER_SUCCESS, DELETE_USER_ERROR } from '../authTypes'\r\nimport  {history} from '../../../../history'\r\n\r\n\r\nexport const SignIn = (credentials) => {\r\n  return async (dispatch) => {\r\n      dispatch({ type: BEFORE_STATE }) \r\n    try {\r\n      const res = await axios.post(`${API_ROUTE}/login`, credentials)\r\n      let userData = res.data\r\n      localStorage.setItem(\"id\", userData.id)\r\n      localStorage.setItem(\"token\", userData.token)\r\n      localStorage.setItem('user_data', JSON.stringify(userData));\r\n      var str = localStorage.getItem('user_data')\r\n      var new_str = str.replace(/\"/g,'')\r\n      localStorage.setItem('user_token',new_str)\r\n      setAuthorizationToken(userData.token)\r\n      dispatch({ type: LOGIN_SUCCESS, payload: userData })\r\n    } catch(err) {\r\n      dispatch({ type: LOGIN_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const SignOut = () => {\r\n  return (dispatch) => {\r\n    localStorage.removeItem(\"token\")\r\n    setAuthorizationToken(false)\r\n    dispatch({ type: LOGOUT_SUCCESS })\r\n    window.localStorage.clear(); //update the localstorage\r\n    history.push('/login');\r\n  }\r\n}\r\n\r\nexport const SignUp = (newUser) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: BEFORE_STATE }) \r\n      try {\r\n        await axios.post(`${API_ROUTE}/users`, newUser);\r\n        dispatch({ type: SIGNUP_SUCCESS })\r\n        history.push('/login');\r\n      } catch(err) {\r\n        dispatch({ type: SIGNUP_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUser = (updateUser, clearInput) => {\r\n\r\n  return async (dispatch, getState) => {\r\n    dispatch({ type: BEFORE_USER_STATE })\r\n    const { currentUser } = getState().Auth\r\n    try {\r\n      const res = await axios.put(`${API_ROUTE}/users/${currentUser.id}`, updateUser);\r\n      let updatedUser = res.data.response\r\n\r\n      dispatch({ type: UPDATE_USER_SUCCESS, payload: updatedUser })\r\n      window.localStorage.setItem('user_data', JSON.stringify(updatedUser)); //update the localstorages\r\n      clearInput()\r\n    } catch (err) {\r\n      dispatch({ type: UPDATE_USER_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteUser = (id)  => {\r\n\r\n  return async dispatch => {\r\n    dispatch({ type: BEFORE_STATE })\r\n    try {\r\n      const res = await axios.delete(`${API_ROUTE}/users/${id}`);\r\n      let deleteMessage = res.data.response\r\n      dispatch({ type: DELETE_USER_SUCCESS, payload: deleteMessage })\r\n      window.localStorage.clear(); //update the localstorage\r\n      window.location.href = \"/\"\r\n    } catch (err) {\r\n      dispatch({ type: DELETE_USER_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}