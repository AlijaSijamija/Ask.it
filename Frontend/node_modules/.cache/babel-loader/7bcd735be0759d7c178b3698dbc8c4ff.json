{"ast":null,"code":"import API_ROUTE from \"../../../../apiRoute\";\nimport axios from 'axios';\nimport { LIKE_CREATE_SUCCESS, LIKE_CREATE_ERROR, GET_LIKES_SUCCESS, GET_LIKES_ERROR, LIKE_DELETE_SUCCESS, LIKE_DELETE_ERROR } from '../likeTypes';\nexport const fetchLikes = id => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`${API_ROUTE}/likes/${id}`);\n      dispatch({\n        type: GET_LIKES_SUCCESS,\n        payload: {\n          questionID: id,\n          likes: res.data\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_LIKES_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const createLike = details => {\n  return async dispatch => {\n    try {\n      console.log(details);\n      const res = await axios.post(`${API_ROUTE}/likes/${details.question_id}`, details);\n      console.log(details);\n      dispatch({\n        type: LIKE_CREATE_SUCCESS,\n        payload: {\n          questionID: details.question_id,\n          oneLike: res.data\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: LIKE_CREATE_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};\nexport const deleteLike = details => {\n  return async dispatch => {\n    try {\n      await axios.delete(`${API_ROUTE}/likes/${details.id}`);\n      dispatch({\n        type: LIKE_DELETE_SUCCESS,\n        payload: {\n          likeID: details.id,\n          questionID: details.questionID\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: LIKE_DELETE_ERROR,\n        payload: err.response.data.error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/store/modules/likes/actions/likesaction.js"],"names":["API_ROUTE","axios","LIKE_CREATE_SUCCESS","LIKE_CREATE_ERROR","GET_LIKES_SUCCESS","GET_LIKES_ERROR","LIKE_DELETE_SUCCESS","LIKE_DELETE_ERROR","fetchLikes","id","dispatch","res","get","type","payload","questionID","likes","data","err","response","error","createLike","details","console","log","post","question_id","oneLike","deleteLike","delete","likeID"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAUC,mBAAV,EACIC,iBADJ,EAEIC,iBAFJ,EAGIC,eAHJ,EAIIC,mBAJJ,EAKIC,iBALJ,QAK6B,cAL7B;AAOA,OAAO,MAAMC,UAAU,GAAGC,EAAE,IAAI;AAE9B,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAW,GAAEZ,SAAU,UAASS,EAAG,EAAnC,CAAlB;AACAC,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,iBADC;AAEPU,QAAAA,OAAO,EAAE;AACPC,UAAAA,UAAU,EAAEN,EADL;AAEPO,UAAAA,KAAK,EAAEL,GAAG,CAACM;AAFJ;AAFF,OAAD,CAAR;AAOD,KATD,CASE,OAAMC,GAAN,EAAW;AACXR,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAER,eAAR;AAAyBS,QAAAA,OAAO,EAAEI,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAApD,OAAD,CAAR;AACD;AACF,GAbD;AAcD,CAhBM;AAkBP,OAAO,MAAMC,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO,MAAOZ,QAAP,IAAoB;AACzB,QAAI;AACFa,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,YAAMX,GAAG,GAAI,MAAMV,KAAK,CAACwB,IAAN,CAAY,GAAEzB,SAAU,UAASsB,OAAO,CAACI,WAAY,EAArD,EAAwDJ,OAAxD,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAZ,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEX,mBADC;AAEPY,QAAAA,OAAO,EAAE;AACPC,UAAAA,UAAU,EAAEO,OAAO,CAACI,WADb;AAEPC,UAAAA,OAAO,EAAEhB,GAAG,CAACM;AAFN;AAFF,OAAD,CAAR;AAOD,KAXD,CAWE,OAAMC,GAAN,EAAU;AACVR,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEV,iBAAR;AAA2BW,QAAAA,OAAO,EAAEI,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAAtD,OAAD,CAAR;AACD;AACF,GAfD;AAgBD,CAjBM;AAoBP,OAAO,MAAMQ,UAAU,GAAGN,OAAO,IAAI;AACnC,SAAO,MAAOZ,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMT,KAAK,CAAC4B,MAAN,CAAc,GAAE7B,SAAU,UAASsB,OAAO,CAACb,EAAG,EAA9C,CAAN;AACAC,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEP,mBADC;AAEPQ,QAAAA,OAAO,EAAE;AACPgB,UAAAA,MAAM,EAAER,OAAO,CAACb,EADT;AAEPM,UAAAA,UAAU,EAAEO,OAAO,CAACP;AAFb;AAFF,OAAD,CAAR;AAOD,KATD,CASE,OAAMG,GAAN,EAAU;AACVR,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEN,iBAAR;AAA2BO,QAAAA,OAAO,EAAEI,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAAtD,OAAD,CAAR;AACD;AACF,GAbD;AAcD,CAfM","sourcesContent":["import API_ROUTE from \"../../../../apiRoute\";\r\nimport axios from 'axios'\r\nimport {  LIKE_CREATE_SUCCESS, \r\n    LIKE_CREATE_ERROR, \r\n    GET_LIKES_SUCCESS, \r\n    GET_LIKES_ERROR, \r\n    LIKE_DELETE_SUCCESS, \r\n    LIKE_DELETE_ERROR } from '../likeTypes'\r\n\r\nexport const fetchLikes = id => {\r\n\r\n  return async dispatch => {\r\n    try {\r\n      const res = await axios.get(`${API_ROUTE}/likes/${id}`)\r\n      dispatch({ \r\n        type: GET_LIKES_SUCCESS, \r\n        payload: {\r\n          questionID: id,\r\n          likes: res.data,\r\n        }\r\n      })\r\n    } catch(err) {\r\n      dispatch({ type: GET_LIKES_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\nexport const createLike = details => {\r\n  return async (dispatch) => {\r\n    try {\r\n      console.log(details)\r\n      const res  = await axios.post(`${API_ROUTE}/likes/${details.question_id}`, details)\r\n      console.log(details)\r\n      dispatch({ \r\n        type: LIKE_CREATE_SUCCESS, \r\n        payload: {\r\n          questionID: details.question_id,\r\n          oneLike: res.data,\r\n        }\r\n      })\r\n    } catch(err){\r\n      dispatch({ type: LIKE_CREATE_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const deleteLike = details => {\r\n  return async (dispatch) => {\r\n    try {\r\n      await axios.delete(`${API_ROUTE}/likes/${details.id}`)\r\n      dispatch({ \r\n        type: LIKE_DELETE_SUCCESS, \r\n        payload: {\r\n          likeID: details.id,\r\n          questionID: details.questionID,\r\n        }\r\n      })\r\n    } catch(err){\r\n      dispatch({ type: LIKE_DELETE_ERROR, payload: err.response.data.error })\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}