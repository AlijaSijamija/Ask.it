{"ast":null,"code":"import React, { Fragment, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Redirect, NavLink } from 'react-router-dom';\nimport { Label, Input, FormGroup, Button, CardBody, Col, Row, Form, CustomInput, Modal, ModalHeader, ModalFooter, ModalBody } from \"reactstrap\";\nimport { updateUser, deleteUser, getUser } from '../../store/modules/auth/actions/authAction';\nimport './Profile.css';\nimport Message from '../utils/Message';\nimport axios from \"axios\";\nimport Navigation from \"../Navigation\";\n/*const Update = () => {\r\n    const currentUserState = useSelector((state) => state.Auth);\r\n    const dispatch = useDispatch()\r\n\r\n    const userUpdate = (userDetails) => dispatch(updateUser(userDetails))\r\n\r\n    const user_data = sessionStorage.getItem('user_info')\r\n    const user_info = JSON.parse(user_data)\r\n    \r\n    const [user, setUser] = useState({\r\n        email: user_info.email,\r\n        name: user_info.name,\r\n        sur_name: user_info.sur_name,\r\n        id: user_info.id\r\n      })\r\n\r\n    const submitUser = (e) => {\r\n        e.preventDefault()\r\n        userUpdate({\r\n          email: user.email,\r\n          name: user.name,\r\n          sur_name: user.sur_name,\r\n          id: user_info.id\r\n        })\r\n      }\r\n    const handleChange = e => {\r\n     setUser({\r\n         ...user,\r\n          [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    if(!currentUserState.isAuthenticated){\r\n        return <Redirect to='/login' />\r\n      }else {\r\n        axios.defaults.headers.common[\"Authorization\"]=`Bearer ${sessionStorage.getItem('user_token')}`\r\n      }\r\n\r\n    return(\r\n        <Fragment>\r\n        <Navigation />\r\n        <Form onSubmit={submitUser}>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                <Label for=\"exampleAddress\">Email</Label>\r\n                <Input type=\"email\" name=\"email\" value={user.email} onChange={handleChange} />\r\n                { currentUserState.userError && currentUserState.userError.Required_email ? (\r\n                  <small className=\"color-red\">{currentUserState.userError.Required_email}</small>) : (\"\")\r\n                }\r\n                { currentUserState.userError && currentUserState.userError.Invalid_email ? (\r\n                  <small className=\"color-red\">{ currentUserState.userError.Invalid_email }</small>) : (\"\")\r\n                }\r\n                { currentUserState.userError && currentUserState.userError.Taken_email ? (\r\n                  <small className=\"color-red\">{ currentUserState.userError.Taken_email }</small>) : (\"\")\r\n                }\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                <Label for=\"exampleAddress\">Name</Label>\r\n                <Input type=\"text\" name=\"name\" value={user.name}   onChange={handleChange}/>\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                <Label for=\"exampleAddress\">Surname</Label>\r\n                <Input type=\"text\" name=\"sur_name\" value={user.sur_name}  onChange={handleChange}/>\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-4\">\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                { currentUserState.authSuccessUser != null && currentUserState.userError == null ? (\r\n                  <Message msg={currentUserState.authSuccessUser} />) : (\"\"\r\n                )}\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-3\">\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                { currentUserState.isUpdatingUser ? (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    block\r\n                    disabled\r\n                  >\r\n                    Updating...\r\n                </Button>\r\n                ) : (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    block\r\n                  >\r\n                  Update\r\n                </Button>\r\n                )}\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Update\r\n*/","map":{"version":3,"sources":["C:/Users/admin/Desktop/Ministry of Programming/askit/src/components/users/Update.js"],"names":["React","Fragment","useState","useEffect","useSelector","useDispatch","Redirect","NavLink","Label","Input","FormGroup","Button","CardBody","Col","Row","Form","CustomInput","Modal","ModalHeader","ModalFooter","ModalBody","updateUser","deleteUser","getUser","Message","axios","Navigation"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,kBAAlC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,QAA1C,EAAoDC,GAApD,EAAyDC,GAAzD,EAA8DC,IAA9D,EAAoEC,WAApE,EAAiFC,KAAjF,EAAwFC,WAAxF,EAAqGC,WAArG,EAAkHC,SAAlH,QAAmI,YAAnI;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,OAAjC,QAAgD,6CAAhD;AACA,OAAQ,eAAR;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,eAAvsourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect, NavLink } from 'react-router-dom';\r\nimport { Label, Input, FormGroup, Button, CardBody, Col, Row, Form, CustomInput, Modal, ModalHeader, ModalFooter, ModalBody } from \"reactstrap\";\r\nimport { updateUser, deleteUser, getUser } from '../../store/modules/auth/actions/authAction';\r\nimport  './Profile.css'\r\nimport Message from '../utils/Message';\r\nimport axios from \"axios\";\r\n\r\nimport Navigation from \"../Navigation\"\r\n\r\n/*const Update = () => {\r\n    const currentUserState = useSelector((state) => state.Auth);\r\n    const dispatch = useDispatch()\r\n\r\n    const userUpdate = (userDetails) => dispatch(updateUser(userDetails))\r\n\r\n    const user_data = sessionStorage.getItem('user_info')\r\n    const user_info = JSON.parse(user_data)\r\n    \r\n    const [user, setUser] = useState({\r\n        email: user_info.email,\r\n        name: user_info.name,\r\n        sur_name: user_info.sur_name,\r\n        id: user_info.id\r\n      })\r\n\r\n    const submitUser = (e) => {\r\n        e.preventDefault()\r\n        userUpdate({\r\n          email: user.email,\r\n          name: user.name,\r\n          sur_name: user.sur_name,\r\n          id: user_info.id\r\n        })\r\n      }\r\n    const handleChange = e => {\r\n     setUser({\r\n         ...user,\r\n          [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    if(!currentUserState.isAuthenticated){\r\n        return <Redirect to='/login' />\r\n      }else {\r\n        axios.defaults.headers.common[\"Authorization\"]=`Bearer ${sessionStorage.getItem('user_token')}`\r\n      }\r\n\r\n    return(\r\n        <Fragment>\r\n        <Navigation />\r\n        <Form onSubmit={submitUser}>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                <Label for=\"exampleAddress\">Email</Label>\r\n                <Input type=\"email\" name=\"email\" value={user.email} onChange={handleChange} />\r\n                { currentUserState.userError && currentUserState.userError.Required_email ? (\r\n                  <small className=\"color-red\">{currentUserState.userError.Required_email}</small>) : (\"\")\r\n                }\r\n                { currentUserState.userError && currentUserState.userError.Invalid_email ? (\r\n                  <small className=\"color-red\">{ currentUserState.userError.Invalid_email }</small>) : (\"\")\r\n                }\r\n                { currentUserState.userError && currentUserState.userError.Taken_email ? (\r\n                  <small className=\"color-red\">{ currentUserState.userError.Taken_email }</small>) : (\"\")\r\n                }\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                <Label for=\"exampleAddress\">Name</Label>\r\n                <Input type=\"text\" name=\"name\" value={user.name}   onChange={handleChange}/>\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                <Label for=\"exampleAddress\">Surname</Label>\r\n                <Input type=\"text\" name=\"sur_name\" value={user.sur_name}  onChange={handleChange}/>\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-4\">\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                { currentUserState.authSuccessUser != null && currentUserState.userError == null ? (\r\n                  <Message msg={currentUserState.authSuccessUser} />) : (\"\"\r\n                )}\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-3\">\r\n            <Col sm=\"12\" md={{ size: 10, offset: 1 }}>\r\n              <FormGroup>\r\n                { currentUserState.isUpdatingUser ? (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    block\r\n                    disabled\r\n                  >\r\n                    Updating...\r\n                </Button>\r\n                ) : (\r\n                  <Button\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    block\r\n                  >\r\n                  Update\r\n                </Button>\r\n                )}\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Update\r\n*/"]},"metadata":{},"sourceType":"module"}